defaults:
  - _self_
  - task: train_clip

name: train_diffusion_unet_clip_discriminator
experiment_tag: ST_OOD_DAgger
# _target_: diffusion_policy.workspace.train_diffusion_unet_clip_workspace.TrainDiffusionUnetImageWorkspace
_target_: diffusion_policy.workspace.train_diffusion_unet_clip_workspace_optimized_discriminator.TrainDiffusionUnetImageWorkspace

task_name: ${task.name}
shape_meta: ${task.shape_meta}
exp_name: "default"

bad_human_path: ${task.dataset.human_path}

policy:
  _target_: diffusion_policy.policy.diffusion_unet_clip_policy_discriminator_policy.DiffusionUnetTimmPolicy
  gradient_penalty: False
  gradient_penalty_weight: 0.001 #10.0 # weight for the gradient penalty

  shape_meta: ${shape_meta}
  
  noise_scheduler:
    _target_: diffusers.DDIMScheduler
    num_train_timesteps: 50
    beta_start: 0.0001
    beta_end: 0.02
    # beta_schedule is important
    # this is the best we found
    beta_schedule: squaredcos_cap_v2
    clip_sample: True
    set_alpha_to_one: True
    steps_offset: 0
    prediction_type: epsilon # or sample

  obs_encoder:
    _target_: diffusion_policy.model.vision.clip_obs_encoder.TimmObsEncoder
    shape_meta: ${shape_meta}

    ##### from scratch #####
    # model_name: 'vit_base_patch16_224'
    # model_name: 'resnet34'
    # model_name: 'vit_tiny_patch16_224'
    # model_name: 'efficientnet_b0'
    # model_name: 'efficientnet_b3'
    # pretrained: False
    # frozen: False

    ##### from scratch #####
    # model_name: 'resnet34.a1_in1k'
    model_name: 'vit_base_patch16_clip_224.openai'
    # model_name: 'convnext_base.clip_laion2b_augreg_ft_in12k'
    pretrained: True
    frozen: False

    
    global_pool: ''

    # 'avg' or 'max' or 'soft_attention' or 'spatial_embedding' or 'transformer' or 'attention_pool_2d'
    feature_aggregation: 'attention_pool_2d'
    # feature_aggregation: null
    position_encording: 'sinusoidal' # 'learnable' or 'sinusoidal'. it only works for transformer

    # it only works for resnet. 32 (7x7) or 16 (14x14)
    downsample_ratio: 32

    # transforms:
    #   - type: RandomCrop
    #     ratio: 0.95
    #   - _target_: torchvision.transforms.ColorJitter
    #     brightness: 0.3
    #     contrast: 0.4
    #     saturation: 0.5
    #     hue: 0.08

    transforms: null

    use_group_norm: True
    share_rgb_model: False
    imagenet_norm: True

  num_inference_steps: 16
  obs_as_global_cond: True
  diffusion_step_embed_dim: 128
  down_dims: [512,1024,2048]
  kernel_size: 5
  n_groups: 8
  cond_predict_scale: True
  input_pertub: 0.1 # reference: https://github.com/forever208/DDPM-IP
  # train multiple diffusion steps per obs encoder forward pass
  # doing this too much will cause instability!
  train_diffusion_n_samples: 1

ema:
  _target_: diffusion_policy.model.diffusion.ema_model.EMAModel
  update_after_step: 0
  inv_gamma: 1.0
  power: 0.75
  min_value: 0.0
  max_value: 0.9999

dataloader:
  batch_size: 48 #96 #48
  num_workers: 24 #48 #24
  shuffle: True
  pin_memory: True
  persistent_workers: True

optimizer:
  _target_: torch.optim.AdamW
  lr: 1.0e-4
  betas: [0.95, 0.999]
  eps: 1.0e-8
  weight_decay: 1.0e-6

training:
  device: "cuda:0"
  seed: 42
  debug: False
  resume: False
  # optimization
  lr_scheduler: cosine
  lr_warmup_steps: 2000
  num_epochs: 25 #1000
  lr_scheduler_epochs: ${training.num_epochs} # eventually allow to set a different number of epochs in case we want to resume,...
  gradient_accumulate_every: 1
  # EMA destroys performance when used with BatchNorm
  # replace BatchNorm with GroupNorm.
  use_ema: False #True #True - I think using EMA for learning the discriminator does not really make sense,...
  freeze_encoder: False
  # training loop control
  # in epochs
  rollout_every: 0
  checkpoint_every: 5 #1 #5 #100
  val_every: 100
  sample_every: 5
  # steps per epoch
  max_train_steps: null
  max_val_steps: null
  # misc
  tqdm_interval_sec: 1.0
  restore_accelerator: False
  previous_accelerator_path: "/home/niklasfunk//Code_robocasa/robocasa_dagger/diffusion_policy/data/outputs/ST_OOD_DAgger_train_diffusion_unet_clip_OpenSingleDoor/base_policy_2025.07.17-18.29.49/checkpoints/epoch_1_accelerator" # "checkpoints/step_10000" # eventually load accelerator here

logging:
  project: learning_from_failures_robocasa #clip
  resume: False
  mode: online
  name: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}
  tags: ["${name}", "${task_name}", "${exp_name}"]
  id: null
  group: null

# # do not do top k - generates too much unnecessary checkoints,...
checkpoint:
  topk:
    monitor_key: train_loss
    mode: min
    k: 0
    format_str: 'epoch={epoch:04d}-train_loss={train_loss:.3f}.ckpt'
  save_last_ckpt: True
  save_last_snapshot: False

# multi_run:
#   run_dir: data/outputs/${now:%Y.%m.%d}/${now:%H.%M.%S}_${name}_${task_name}
#   wandb_name_base: ${now:%Y.%m.%d-%H.%M.%S}_${name}_${task_name}

hydra:
  job:
    override_dirname: ${experiment_tag}_${name}
  run:
    dir: data/outputs/${experiment_tag}_${name}_${task_name}/base_policy_${now:%Y.%m.%d-%H.%M.%S}
  sweep:
    dir: data/outputs/${experiment_tag}_${name}_${task_name}/base_policy_${now:%Y.%m.%d-%H.%M.%S}
    subdir: ${hydra.job.num}

# hydra:
#   job:
#     override_dirname: ${experiment_tag}_${name}
#   run:
#     dir: data/outputs/${experiment_tag}_${name}_${task_name}/finetune_from_scratch
#   sweep:
#     dir: data/outputs/${experiment_tag}_${name}_${task_name}/finetune_from_scratch
#     subdir: ${hydra.job.num}


    # merged_original_human_only